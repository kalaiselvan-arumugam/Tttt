import java.io.*;
import java.nio.file.*;

public class KanbanProjectGenerator {
    public static void main(String[] args) throws Exception {
        String root = "kanban-board";

        String[][] structure = {
            {"src/main/java/com/example/kanban/controller", taskController()},
            {"src/main/java/com/example/kanban/model", taskModel()},
            {"src/main/java/com/example/kanban/repository", taskRepository()},
            {"src/main/java/com/example/kanban/service", taskService()},
            {"src/main/java/com/example/kanban", kanbanApplication()},
            {"src/main/resources", applicationProperties()},
            {"src/test/java/com/example/kanban/controller", taskControllerTest()}
        };

        mkdir(root);

        write(root, "pom.xml", pomXml());
        write(root, "README.md", readme());

        for (String[] part : structure) {
            mkdir(root + "/" + part[0]);
            String name = guessFilename(part[1]);
            write(root + "/" + part[0], name, part[1]);
        }

        System.out.println("‚úÖ Kanban project generated at: " + root);
    }

    static void mkdir(String dir) throws IOException {
        Files.createDirectories(Paths.get(dir));
    }

    static void write(String dir, String fileName, String content) throws IOException {
        Path path = Paths.get(dir, fileName);
        Files.write(path, content.getBytes());
        System.out.println("üìù Created: " + path);
    }

    static String guessFilename(String content) {
        String[] lines = content.split("\n");
        for (String line : lines) {
            line = line.trim();
            if (line.startsWith("package")) continue;
            if (line.startsWith("import")) continue;
            if (line.contains("class")) {
                String name = line.split("class")[1].split("\\s+")[1];
                return name + ".java";
            }
        }
        return "Unknown.java";
    }

    // === File contents ===

    static String pomXml() {
        return """
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>kanban-board</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
""";
    }

    static String applicationProperties() {
        return """
spring.datasource.url=jdbc:h2:file:./kanban-db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
""";
    }

    static String kanbanApplication() {
        return """
package com.example.kanban;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class KanbanApplication {
    public static void main(String[] args) {
        SpringApplication.run(KanbanApplication.class, args);
    }
}
""";
    }

    static String taskModel() {
        return """
package com.example.kanban.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.time.LocalDate;

@Entity
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String applicationName;
    private String taskName;
    private String priority;
    private LocalDateTime createdDate;
    private LocalDate closeDate;
    private String description;
    private String owner;
    private String status;

    @PrePersist
    public void prePersist() {
        this.createdDate = LocalDateTime.now();
        if (this.status == null) {
            this.status = "Open";
        }
    }

    // getters & setters
}
""";
    }

    static String taskRepository() {
        return """
package com.example.kanban.repository;

import com.example.kanban.model.Task;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TaskRepository extends JpaRepository<Task, Long> {
}
""";
    }

    static String taskService() {
        return """
package com.example.kanban.service;

import com.example.kanban.model.Task;
import com.example.kanban.repository.TaskRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TaskService {
    private final TaskRepository repository;

    public TaskService(TaskRepository repository) {
        this.repository = repository;
    }

    public Task create(Task task) {
        return repository.save(task);
    }

    public List<Task> findAll() {
        return repository.findAll();
    }

    public Task update(Long id, Task updated) {
        return repository.findById(id).map(task -> {
            task.setApplicationName(updated.getApplicationName());
            task.setTaskName(updated.getTaskName());
            task.setPriority(updated.getPriority());
            task.setCloseDate(updated.getCloseDate());
            task.setDescription(updated.getDescription());
            task.setOwner(updated.getOwner());
            task.setStatus(updated.getStatus());
            return repository.save(task);
        }).orElseThrow(() -> new RuntimeException("Task not found with id " + id));
    }

    public void delete(Long id) {
        repository.deleteById(id);
    }
}
""";
    }

    static String taskController() {
        return """
package com.example.kanban.controller;

import com.example.kanban.model.Task;
import com.example.kanban.service.TaskService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/tasks")
@CrossOrigin
public class TaskController {
    private final TaskService service;

    public TaskController(TaskService service) {
        this.service = service;
    }

    @PostMapping
    public ResponseEntity<Task> create(@RequestBody Task task) {
        return ResponseEntity.ok(service.create(task));
    }

    @GetMapping
    public ResponseEntity<List<Task>> getAll() {
        return ResponseEntity.ok(service.findAll());
    }

    @PutMapping("/{id}")
    public ResponseEntity<Task> update(@PathVariable Long id, @RequestBody Task task) {
        return ResponseEntity.ok(service.update(id, task));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete(@PathVariable Long id) {
        service.delete(id);
        return ResponseEntity.ok().body("{\\"message\\":\\"Task deleted successfully\\",\\"id\\":" + id + "}");
    }
}
""";
    }

    static String taskControllerTest() {
        return """
package com.example.kanban.controller;

import com.example.kanban.model.Task;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
class TaskControllerTest {

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper mapper;

    @Test
    void createAndGetTask() throws Exception {
        Task task = new Task();
        task.setApplicationName("App");
        task.setTaskName("Task");
        task.setPriority("High");
        task.setDescription("Test");
        task.setOwner("Alice");

        mockMvc.perform(post("/api/tasks")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(task)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").exists());

        mockMvc.perform(get("/api/tasks"))
                .andExpect(status().isOk());
    }
}
""";
    }

    static String readme() {
        return """
# Kanban Board Application

### üõ†Ô∏è Run

```bash
mvn spring-boot:run
