package com.example.demo.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.List;

@Controller
public class FileUploadController {

    private static final long MAX_TOTAL_SIZE = 10 * 1024 * 1024; // 10 MB
    private static final String UPLOAD_DIR = "uploads/";

    @PostMapping("/upload")
    public ResponseEntity<String> handleFileUpload(@RequestParam("files") List<MultipartFile> files) {
        if (files.isEmpty()) {
            System.err.println("No files selected by user.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("No files selected.");
        }

        if (files.size() > 10) {
            System.err.println("User tried to upload more than 10 files.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: You can only upload up to 10 files.");
        }

        long totalSize = 0;

        for (MultipartFile file : files) {
            String fileName = file.getOriginalFilename();

            if (fileName == null || !fileName.toLowerCase().endsWith(".csv")) {
                System.err.println("Invalid file type: " + fileName);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: " + fileName + " is not a CSV file.");
            }

            String baseName = fileName.substring(0, fileName.lastIndexOf('.'));

            if (!baseName.startsWith("SISC")) {
                System.err.println("Invalid file name: " + fileName);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: " + fileName + " - Invalid file name (should start with 'SISC').");
            }

            if (baseName.length() > 13) {
                System.err.println("File name too long: " + fileName);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: " + fileName + " - File name too long (max 13 characters without extension).");
            }

            totalSize += file.getSize();

            if (totalSize > MAX_TOTAL_SIZE) {
                System.err.println("Total file size exceeded after adding: " + fileName);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error: Total file size exceeds 10 MB after adding " + fileName);
            }
        }

        File dir = new File(UPLOAD_DIR);
        if (!dir.exists() && !dir.mkdirs()) {
            System.err.println("Failed to create upload directory.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: Could not create upload directory.");
        }

        for (MultipartFile file : files) {
            try {
                File dest = new File(UPLOAD_DIR + file.getOriginalFilename());
                file.transferTo(dest);
                System.out.println("File saved successfully: " + dest.getAbsolutePath());
            } catch (IOException e) {
                System.err.println("Error saving file: " + file.getOriginalFilename() + " - " + e.getMessage());
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving file: " + file.getOriginalFilename());
            }
        }

        return ResponseEntity.ok("All files uploaded successfully!");
    }
}

<!-- jQuery AJAX Code -->
<script>
  $(document).ready(function () {
    $('#fileInput').on('change', function (e) {
      const files = this.files;

      let formData = new FormData();
      for (let i = 0; i < files.length; i++) {
        formData.append("files", files[i]);
      }

      $.ajax({
        url: '/upload',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
          console.log('Success:', response);
          alert(response);
        },
        error: function (xhr, status, error) {
          console.error('Error status:', status);
          console.error('Error thrown:', error);
          console.error('Response text:', xhr.responseText);
          alert('Upload failed: ' + (xhr.responseText || 'Unknown error'));
        }
      });
    });
  });
</script>
