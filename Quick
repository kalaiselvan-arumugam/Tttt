``` java
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class CsvComparator {

    private static final int BUFFER_SIZE = 16 * 1024 * 1024; // 16MB buffer

    public static void main(String[] args) throws IOException {
        long startTime = System.currentTimeMillis();
        
        String file1Path = "E:\\Downloads\\5m-Sales-Records\\old.csv";
        String file2Path = "E:\\Downloads\\5m-Sales-Records\\new.csv";
        String outputPath = "differences.txt";
        long totalDifferences = 0;

        try (InputStream is1 = new FileInputStream(file1Path);
             InputStream is2 = new FileInputStream(file2Path);
             Reader r1 = new InputStreamReader(is1, StandardCharsets.UTF_8);
             Reader r2 = new InputStreamReader(is2, StandardCharsets.UTF_8);
             BufferedReader reader1 = new BufferedReader(r1, BUFFER_SIZE);
             BufferedReader reader2 = new BufferedReader(r2, BUFFER_SIZE);
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputPath))) {

            List<String> cols1 = new ArrayList<>(32);
            List<String> cols2 = new ArrayList<>(32);
            int line1Num = 0, line2Num = 0;
            long linesProcessed = 0;
            long lastStatusUpdate = System.currentTimeMillis();

            while (true) {
                String line1 = reader1.readLine();
                String line2 = reader2.readLine();
                linesProcessed++;

                // Status update every 500,000 lines or 5 seconds
                if (linesProcessed % 500_000 == 0 || 
                    System.currentTimeMillis() - lastStatusUpdate > 5000) {
                    System.out.printf("Processed %,d lines (%,d diffs) [%.1f%%]%n",
                        linesProcessed, totalDifferences,
                        (linesProcessed/10_000_000.0)*100);
                    lastStatusUpdate = System.currentTimeMillis();
                }

                boolean hasLine1 = line1 != null;
                boolean hasLine2 = line2 != null;

                if (!hasLine1 && !hasLine2) break;

                if (!hasLine1) {
                    totalDifferences++;
                    writeDifference(writer, "File1 missing line corresponding to File2 line %d: %s", 
                            ++line2Num, line2);
                    totalDifferences += drainRemaining(reader2, line2Num, "File2", writer);
                    break;
                } else if (!hasLine2) {
                    totalDifferences++;
                    writeDifference(writer, "File2 missing line corresponding to File1 line %d: %s", 
                            ++line1Num, line1);
                    totalDifferences += drainRemaining(reader1, line1Num, "File1", writer);
                    break;
                }

                line1Num++;
                line2Num++;

                if (!line1.equals(line2)) {
                    cols1.clear();
                    cols2.clear();
                    fastSplit(line1, cols1);
                    fastSplit(line2, cols2);

                    if (cols1.size() != cols2.size()) {
                        totalDifferences++;
                        writeDifference(writer, "Line %d (File1) vs %d (File2): Column count differs (%d vs %d)",
                                line1Num, line2Num, cols1.size(), cols2.size());
                        continue;
                    }

                    for (int i = 0; i < cols1.size(); i++) {
                        String val1 = cols1.get(i);
                        String val2 = cols2.get(i);
                        if (!val1.equals(val2)) {
                            totalDifferences++;
                            writeDifference(writer, "Line %d (File1) vs %d (File2): Column %d differs - '%s' vs '%s'",
                                    line1Num, line2Num, i + 1, val1, val2);
                        }
                    }
                }
            }

            long endTime = System.currentTimeMillis();
            double elapsedSeconds = (endTime - startTime) / 1000.0;
            double linesPerSecond = linesProcessed / elapsedSeconds;

            System.out.printf("%nCOMPLETED in %.2f seconds%n", elapsedSeconds);
            System.out.printf("Lines processed: %,d (%,.0f lines/sec)%n", linesProcessed, linesPerSecond);
            System.out.printf("Total differences: %,d%n", totalDifferences);
            System.out.printf("Output file: %s%n", outputPath);

        } catch (Exception e) {
            System.err.println("ERROR: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static int drainRemaining(BufferedReader reader, int startLine, 
                                    String fileName, BufferedWriter writer) throws IOException {
        int extraLines = 0;
        String line;
        while ((line = reader.readLine()) != null) {
            extraLines++;
            writeDifference(writer, "%s has extra line at position %d: %s", fileName, ++startLine, line);
        }
        return extraLines;
    }

    private static void writeDifference(BufferedWriter writer, String template, Object... args) throws IOException {
        writer.write(String.format(template, args));
        writer.newLine();
    }

    private static void fastSplit(String line, List<String> columns) {
        columns.clear();
        int start = 0;
        int len = line.length();
        while (start < len) {
            int end = line.indexOf(',', start);
            if (end == -1) end = len;
            columns.add(line.substring(start, end));
            start = end + 1;
        }
    }
}
```
